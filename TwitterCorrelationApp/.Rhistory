highwayTwitterAggsFull <- highwayTwitterAggsFullList[[i]]
newdf <-
melt(highwayTwitterAggsFull[,c("gmt_date", "value")],'gmt_date')
newdf$variable <-
ifelse(newdf$variable == "value", highwayTwitterAggsFull$road[1], "value")
meltedDF <- rbind(meltedDF,newdf)
}
colnames(meltedDF) <- c("gmt_date", "Highway", "value")
attr(meltedDF$gmt_date, "tzone") <- "GMT"
lower <-
with(meltedDF,as.POSIXct(strftime(min(gmt_date),"%Y-%m-%d %H:%M:%S")))
upper <-
with(meltedDF,as.POSIXct(strftime(max(gmt_date),"%Y-%m-%d %H:%M:%S")))
limits = c(lower,upper)
xList <- myXBreaks(meltedDF$gmt_date)
timelineplot <- ggplot(meltedDF,aes(x = gmt_date,y = value)) +
geom_line(size = 1.5,aes(colour = Highway)) +
scale_fill_brewer(palette = "Set1") +
xlab(xList[[1]]) +
ylab("Number of tweets") +
scale_x_datetime(
date_breaks = (xList[[2]]),
date_labels = xList[[3]],
limits = limits
) +
scale_y_continuous(breaks = myYBreaks(meltedDF$value), labels=comma) +
ggtitle("Highway Mentions in Tweets") +
theme(
plot.title = element_text(colour = "red", size = 18),
axis.text.x = element_text(
angle = 45, hjust = 1, size = 14
),
axis.title.x = element_text(size = 14, colour="blue"),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14, colour="blue"),
legend.text = element_text(size = 14),
legend.title = element_text(colour="blue", size=14, face="bold")
)
returnList <- list()
returnList[[1]] <- timelineplot
returnList[[2]] <- valuesDF
return(returnList)
}
hlst <- plotHighwayTimeLines(startStr, endStr, highwayCodes)
hlst[[1]]
#libraries
require(rmongodb)
require(futile.logger)
require(tm)
require(RCurl)
require(jsonlite)
require(wordcloud)
require(RColorBrewer)
require(xts)
require(reshape2)
require(plyr)
require(ggplot2)
require(scales)
Sys.setenv(TZ='GMT')
myYBreaks <- function(y){
minV <- round_any(min(y), 10, f = floor)
maxV <- round_any(max(y), 10, f = ceiling)
breaks <- seq(minV,  maxV, by = round((maxV-minV)/10))
names(breaks) <- attr(breaks,"labels")
return(breaks)
}
myXBreaks <- function(x){
xList <- list()
d <- round(abs(difftime(min(x),max(x),units="days")))
dNum <- as(d,"numeric")
if (dNum <= 7) {
xlabStr <- "Time (Hours)"
dateBreaks <- switch(dNum,
"1 hour",
"2 hours",
"3 hours",
"4 hours",
"6 hours",
"6 hours",
"6 hours"
)
dateLabels = "%B %d %H"
} else if (dNum <= 14) {
xlabStr <- "Time (Hours)"
dateBreaks <- "12 hours"
dateLabels = "%B %d %H"
} else {
xlabStr <- "Time (Hours)"
dateBreaks <- "24 hours"
dateLabels = "%B %d %H"
}
xList[[1]] <- xlabStr
xList[[2]] <- dateBreaks
xList[[3]] <- dateLabels
return(xList)
}
# setwd("C:\\Users\\Ahmad\\Dropbox\\Work\\WolverhamptonUni\\Optimum\\social_media\\twitter\\ShinyApps\\SocialMinerShinyApp")
startStr <- "2016-07-01"
endStr <- "2016-07-02"
highwayCodes <- c("M1","M5")
plotHighwayTimeLines <- function(startStr, endStr, highwayCodes) {
if (length(highwayCodes) < 1) {
msg <- "highwayCodes must contains at least one highway"
return(msg)
}
startStr <- paste0(startStr,"T00:00:00")
endStr <- paste0(endStr,"T23:59:59")
startDt <-
strptime(startStr, format = "%Y-%m-%dT%H:%M:%S", tz = "GMT")
endDt <-
strptime(endStr, format = "%Y-%m-%dT%H:%M:%S", tz = "GMT")
if (endDt <= startStr) {
msg <- "start date must be older than end date"
return(msg)
}
#connect to mongoDB
mongo <- mongo.create(host = "optimum.euprojects.net:3368")
#create a list to store all the dataframes
highwayTwitterAggsList <- list()
if (mongo.is.connected(mongo) == TRUE) {
for (i in 1:length(highwayCodes)) {
#create dataframe to store the data
highwayTwitterAggs = data.frame(
gmt_date = as.POSIXct(character()),
value = numeric(0),
road = character(0),
stringsAsFactors = F
)
queryList <- mongo.bson.from.list(list(
'gmt_date' = list("$gte" = startDt,
"$lte" = endDt),
"highway_code" = highwayCodes[i]
))
tweets_count <-
mongo.count(mongo,"Twitter.uk_accounts_highway_hr_agg",query = queryList)
if (tweets_count > 0) {
# flog.info("Total records to be fetched for highway %s: %s",highwayCodes[i], tweets_count)
result <-
mongo.find(mongo, "Twitter.uk_accounts_highway_hr_agg", query = queryList)
while (mongo.cursor.next(result)) {
tdDt <- .POSIXct(character())
l <- list(mongo.bson.to.list(mongo.cursor.value(result)))
tdDt <- l[[1]]$gmt_date
value <- l[[1]]$value
highwayTwitterAggs <- rbind(
highwayTwitterAggs,
data.frame(
gmt_date = tdDt,
value = value,
road = highwayCodes[i],
stringsAsFactors = FALSE
)
)
}
attr(highwayTwitterAggs$gmt_date, "tzone") <- "GMT"
highwayTwitterAggs <-
highwayTwitterAggs[with(highwayTwitterAggs, order(gmt_date)),]
highwayTwitterAggsList[[i]] <- highwayTwitterAggs
} else {
#flog.info("No records found for highway %s",highwayCodes[i])
msg <- paste0("No records found for highway ",highwayCodes[i])
return(msg)
}
}
}
#Fill the hours which do not exist in the retrieved data with zero values
highwayTwitterAggsFullList <- list()
for (i in 1:length(highwayTwitterAggsList)) {
highwayTwitterAggsFull <- data.frame(
gmt_date = as.POSIXct(character()),
value = numeric(0),
road = character(0),
stringsAsFactors = F
)
highwayTwitterAggs <- highwayTwitterAggsList[[i]]
minDate <- startDt
maxDate <- endDt
road <- highwayTwitterAggs$road[1]
while (minDate <= maxDate) {
value <-
highwayTwitterAggs[highwayTwitterAggs$gmt_date == minDate,c("value")]
if (length(value) > 0) {
highwayTwitterAggsFull <- rbind(
highwayTwitterAggsFull,
data.frame(
gmt_date = minDate,
value = value,
road = road,
stringsAsFactors = FALSE
)
)
} else {
#         flog.info(
#           "No record found for highway %s on gmt_date: %s", road, strftime(minDate,"%Y-%m-%d %H:%M:%S",tz =
#                                                                              "GMT")
#         )
highwayTwitterAggsFull <- rbind(
highwayTwitterAggsFull,
data.frame(
gmt_date = minDate,
value = 0,
road = road,
stringsAsFactors = FALSE
)
)
}
minDate <- minDate + 3600
}
attr(highwayTwitterAggsFull$gmt_date, "tzone") <- "GMT"
highwayTwitterAggsFull <-
highwayTwitterAggsFull[with(highwayTwitterAggsFull, order(gmt_date)),]
highwayTwitterAggsFullList[[i]] <- highwayTwitterAggsFull
}
#create a dataframe of all the highway values
valuesDF <- NULL
for (i in 1:length(highwayTwitterAggsFullList)) {
highwayTwitterAggsFull <- highwayTwitterAggsFullList[[i]]
hway <- highwayTwitterAggsFull$road[1]
if (is.null(valuesDF)) {
valuesDF$col1 <- highwayTwitterAggsFull$value
valuesDF <- as.data.frame(valuesDF)
colnames(valuesDF) <- hway
} else {
col <- highwayTwitterAggsFull$value
col <- as.data.frame(col)
colnames(col) <- hway
valuesDF <- as.data.frame(cbind(valuesDF,col))
}
}
#create the melted dataframes and merge them all into one data frame for the plot
meltedDF <- data.frame(
gmt_date = as.POSIXct(character()),
variable = character(0),
value = numeric(0),
stringsAsFactors = F
)
for (i in 1:length(highwayTwitterAggsFullList)) {
highwayTwitterAggsFull <- highwayTwitterAggsFullList[[i]]
newdf <-
melt(highwayTwitterAggsFull[,c("gmt_date", "value")],'gmt_date')
newdf$variable <-
ifelse(newdf$variable == "value", highwayTwitterAggsFull$road[1], "value")
meltedDF <- rbind(meltedDF,newdf)
}
colnames(meltedDF) <- c("gmt_date", "Highway", "value")
attr(meltedDF$gmt_date, "tzone") <- "GMT"
lower <-
with(meltedDF,as.POSIXct(strftime(min(gmt_date),"%Y-%m-%d %H:%M:%S")))
upper <-
with(meltedDF,as.POSIXct(strftime(max(gmt_date),"%Y-%m-%d %H:%M:%S")))
limits = c(lower,upper)
xList <- myXBreaks(meltedDF$gmt_date)
timelineplot <- ggplot(meltedDF,aes(x = gmt_date,y = value)) +
geom_line(size = 1.5,aes(colour = Highway)) +
scale_fill_brewer(palette = "Set1") +
xlab(xList[[1]]) +
ylab("Number of tweets") +
scale_x_datetime(
date_breaks = (xList[[2]]),
date_labels = xList[[3]],
limits = limits
) +
scale_y_continuous(breaks = myYBreaks(meltedDF$value), labels=comma) +
ggtitle("Highway Mentions in Tweets") +
theme(
plot.title = element_text(colour = "red", size = 20),
axis.text.x = element_text(
angle = 45, hjust = 1, size = 16
),
axis.title.x = element_text(size = 16, colour="blue"),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16, colour="blue"),
legend.text = element_text(size = 16),
legend.title = element_text(colour="blue", size=16, face="bold")
)
returnList <- list()
returnList[[1]] <- timelineplot
returnList[[2]] <- valuesDF
return(returnList)
}
hlst <- plotHighwayTimeLines(startStr, endStr, highwayCodes)
hlst[[1]]
startStr <- "2016-07-01"
endStr <- "2016-07-06"
highwayCodes <- c("M1","M5")
hlst <- plotHighwayTimeLines(startStr, endStr, highwayCodes)
hlst[[1]]
startStr <- "2016-06-01"
endStr <- "2016-06-20"
highwayCodes <- c("M1","M5")
hlst <- plotHighwayTimeLines(startStr, endStr, highwayCodes)
hlst[[1]]
shiny::runApp()
dir()
getwd()
shiny::runApp()
x <- "Ahmad"
foo <- function(){
print(x)
}
x <- "Ahmad"
foo <- function(){
print(x)
}
foo()
shiny::runApp('C:/Users/Ahmad/Dropbox/Work/WolverhamptonUni/Optimum/social_media/twitter/ShinyApps/TwitterCorrelationApp')
shiny::runApp('C:/Users/Ahmad/Dropbox/Work/WolverhamptonUni/Optimum/social_media/twitter/ShinyApps/TwitterCorrelationApp')
dir()
source("GetSensorDF.R")
source("GetTwitterDF.R")
source("AggregateSensorDF.R")
dir()
setwd("C:\\Users\\Ahmad\\Dropbox\\Work\\WolverhamptonUni\\Optimum\\social_media\\twitter\\ShinyApps\\TwitterCorrelationApp")
source("GetSensorDF.R")
source("GetTwitterDF.R")
source("AggregateSensorDF.R")
source("GetSensorDF.R")
source("GetTwitterDF.R")
source("AggregateSensorDF.R")
sensorDf <- GetSensorDF(startStr, endStr, roadSensId, mType)
aggSensorData <- AggregateSensorDF(sensorDf,mType)
aggSensorDF <- aggSensorData[[1]]
startDt <- aggSensorData[[2]]
endDt <- aggSensorData[[3]]
head(aggSensorDF)
sum(sensorDf[with(sensorDf, sensorDf$datetime >= "2016-05-01 00:00:00" & sensorDf$datetime < "2016-05-01 01:00:00"),c("V")])
TwitterAggsFull <- GetTwitterDF(startDt, endDt, roadSensId, TwitterDT, trafficConceptsCor)
head(TwitterAggsFull)
tail(TwitterAggsFull)
mergedDt <- merge(aggSensorDF, TwitterAggsFull, by.x = "datetime", by.y = "gmt_date")
head(mergedDt)
colnames(mergedDt) <- c("datetime","sensorV","twitterV")
source("PlotCorrs.R")
PlotCorrs(mergedDt,ACF,CCF,Reg,timePlots)
class(mergedDt)
sum(c(ACF,CCF,Reg,timePlots))
numPlots
numPlots <- sum(c(ACF,CCF,Reg,timePlots))
par(mfrow=c(numPlots+1,1))
acf(mergedDt$sensorV, lag.max=12, main="Sensor Values", xlim=c(1,25))
par(mfrow=c(1,1))
acf(mergedDt$sensorV, lag.max=12, main="Sensor Values", xlim=c(1,25))
acf(mergedDt$twitterV, lag.max=25, main="Twitter Values", xlim=c(1,25))
ccf(mergedDt$twitterV, mergedDt$sensorV, 25, main="Twitter VS Sensor", ylab="CCF")
if (Reg) {
ggplot(mergedDt, aes(x=twitterV, y=sensorV)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
geom_point(shape=20, size = 5) +
xlab("Hourly mentions of Twitter events") +
ylab("Hourly sensor readings") +
#scale_y_discrete(breaks = seq(min(pol_dist$volume), max(pol_dist$volume), by = 100), labels = comma) +
ggtitle("Twitter Traffic Events VS Sensor Readings") +
theme(plot.title = element_text(color="#666666", face="bold", size=14),
axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
axis.title.x=element_text(size=14,face="bold"),
axis.title.y=element_text(size=14,face="bold")) +
geom_text(x = median(unique(mergedDt$twitterV)), y = median(unique(mergedDt$sensorV)),
label = lm_eqn(mergedDt), size=8, colour = "black", parse = TRUE)
}
if (timePlots) {
minDate <- min(mergedDt$datetime)
maxDate <- max(mergedDt$datetime)
limits = c(minDate,maxDate)
ggplot(mergedDt, aes(datetime)) +
geom_line(aes(y = sensorV, colour = "sensorV")) +
geom_line(aes(y = twitterV, colour = "twitterV")) +
scale_x_datetime( date_breaks=("6 hour"),
date_labels="%m-%d %H",
limits=limits) +
xlab("") +
ylab("Sensor Data Vs. Twitter Data") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 10),
legend.text = element_text(size = 12))
}
par(mfrow=c(3,1))
acf(mergedDt$sensorV, lag.max=12, main="Sensor Values", xlim=c(1,25))
acf(mergedDt$twitterV, lag.max=25, main="Twitter Values", xlim=c(1,25))
ccf(mergedDt$twitterV, mergedDt$sensorV, 25, main="Twitter VS Sensor", ylab="CCF")
825 + 500
shiny::runApp()
shiny::runApp()
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
?scale_y_continuous
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
?geom_line
?labs
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
?round_any
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
source("PlotTimeLines.R")
PlotTimeLines(mergedDt)
shiny::runApp()
source("GetSensorDF.R")
source("GetTwitterDF.R")
source("AggregateSensorDF.R")
source("GetRoadAndSensorNames.R")
source("GetMergedDF.R")
source("PlotCorrs.R")
source("PlotReg.R")
source("PlotTimeLines.R")
sensorDf <- GetSensorDF(startStr, endStr, roadSensId, mType)
aggSensorData <- AggregateSensorDF(sensorDf,mType)
aggSensorDF <- aggSensorData[[1]]
startDt <- aggSensorData[[2]]
endDt <- aggSensorData[[3]]
TwitterAggsFull <- GetTwitterDF(startDt, endDt, roadSensId, TwitterDT, trafficConceptsCor)
mergedDt <- merge(aggSensorDF, TwitterAggsFull, by.x = "datetime", by.y = "gmt_date")
colnames(mergedDt) <- c("datetime","sensorV","twitterV")
head(mergedDt)
PlotCorrs(mergedDt(),1,1)
PlotCorrs(mergedDt,1,1)
PlotTimeLines(mergedDt)
PlotReg(mergedDt)
shiny::runApp()
acfo <- acf(mergedDt$sensorV, lag.max=12, main="Sensor Values", xlim=c(1,25))
acfo
?ccf
Find_Max_CCF<- function(a,b)
{
d <- ccf(a, b, plot = FALSE)
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
res_max = res[which.max(res$cor),]
return(res_max)
}
d <- ccf(mergedDt$twitterV, mergedDt$sensorV, plot = FALSE)
d <- ccf(mergedDt$twitterV, mergedDt$sensorV, plot = FALSE, lag.max=25)
d
d$acf[,,1]
d$lag[,,1]
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
res_max = res[which.max(res$cor),]
res_max
class(res_max)
Find_Max_CCF<- function(a,b)
{
d <- ccf(a, b, plot = FALSE, lag.max=12)
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
res = res[res$lag <= 0,]
res_max = res[which.max(res$cor),]
return(res_max)
}
ccf.DF <- Find_Max_CCF(mergedDt$twitterV, mergedDt$sensorV)
ccf.DF
Find_Max_CCF<- function(a,b)
{
d <- ccf(a, b, plot = FALSE, lag.max=12)
cor = d$acf[,,1]
lag = d$lag[,,1]
res = data.frame(cor,lag)
res = res[res$lag < 0,]
res_max = res[which.max(res$cor),]
return(res_max)
}
ccf.DF <- Find_Max_CCF(mergedDt$twitterV, mergedDt$sensorV)
ccf.DF
ccf(mergedDt$twitterV, mergedDt$sensorV, lag.max=12, main=paste0("Cross-Correlation - Dominant Lag: ",domLag," - Correlation: ",corr)
, ylab="CCF", plot = TRUE, xlim=c(1,12))
par(mfrow=c(1,1))
ccf(mergedDt$twitterV, mergedDt$sensorV, lag.max=12, main=paste0("Cross-Correlation - Dominant Lag: ",domLag," - Correlation: ",corr)
, ylab="CCF", plot = TRUE, xlim=c(1,12))
ccf.DF <- Find_Max_CCF(mergedDt$twitterV, mergedDt$sensorV)
domLag <- ccf.DF$lag
corr <- ccf.DF$cor
ccf(mergedDt$twitterV, mergedDt$sensorV, lag.max=12, main=paste0("Cross-Correlation - Dominant Lag: ",domLag," - Correlation: ",corr)
, ylab="CCF", plot = TRUE, xlim=c(1,12))
ccf.DF <- Find_Max_CCF(mergedDt$twitterV, mergedDt$sensorV)
domLag <- ccf.DF$lag
corr <- ccf.DF$cor
ccf(mergedDt$twitterV, mergedDt$sensorV, lag.max=12, main=paste0("Cross-Correlation - Dominant Lag: ",domLag," - Correlation: ",corr)
, ylab="CCF", plot = TRUE, xlim=c(-12,0))
ccf.DF <- Find_Max_CCF(mergedDt$twitterV, mergedDt$sensorV)
domLag <- ccf.DF$lag
corr <- round(ccf.DF$cor,3)
ccf(mergedDt$twitterV, mergedDt$sensorV, lag.max=12, main=paste0("Cross-Correlation Plot \n Dominant Lag: ",domLag," - Correlation: ",corr)
, ylab="CCF", plot = TRUE, xlim=c(-12,0))
source("PlotCorrs.R")
PlotCorrs(mergedDt,1,1,maxLag)
?cor
lag2.plot (mergedDt$twitterV, mergedDt$sensorV, maxLag)
?lag2.plot
lag2.plot (mergedDt$twitterV, mergedDt$sensorV, maxLag,corr = TRUE, smooth = TRUE)
lag2.plot (mergedDt$twitterV, mergedDt$sensorV, maxLag,corr = F, smooth = TRUE)
lag2.plot (mergedDt$twitterV, mergedDt$sensorV, maxLag,corr = F, smooth = F)
lag2.plot (mergedDt$twitterV, mergedDt$sensorV, maxLag,corr = F, smooth = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
